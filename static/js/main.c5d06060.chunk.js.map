{"version":3,"sources":["components/TechElement.jsx","components/Tech.jsx","components/Nav.jsx","components/Footer.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["TechElement","key","id","src","title","handleClick","alt","style","width","height","onClick","Tech","state","images","imagesClicked","click","topScore","guess","handleTechElementClick","event","elementId","target","plusClick","includes","uneducatedGuess","educatedGuess","shuffleTechElements","setState","newArray","sort","Math","random","className","this","map","Component","Nav","href","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6/BAmBeA,MAjBf,YAA4D,IAArCC,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,GAAIC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,YAC1C,OACE,oCACE,gCACE,yBACEJ,IAAKA,EACLC,GAAIA,EACJC,IAAKA,EACLG,IAAKF,EACLG,MAAO,CAAEC,MAAO,QAASC,OAAQ,SACjCC,QAASL,O,OC8DJM,E,2MArEbC,MAAQ,CACNC,SACAC,cAAe,GACfC,MAAO,EACPC,SAAU,EACVC,MAAO,I,EAGTC,uBAAyB,SAAAC,GACvB,IAAMC,EAAYD,EAAME,OAAOnB,GACzBoB,EAAY,EAAKV,MAAMG,MAAQ,EACpC,EAAKH,MAAME,cAAcS,SAASH,GAE/B,EAAKI,kBADL,EAAKC,cAAcH,EAAWF,GAEhC,EAAKM,uB,EAGTD,cAAgB,SAACH,EAAWF,GAC1B,EAAKO,SAAS,CACZZ,MAAOO,EACPR,cAAc,GAAD,mBAAM,EAAKF,MAAME,eAAjB,CAAgCM,IAC7CH,MAAO,2BAER,EAAKL,MAAMI,UAAYM,EACtB,EAAKK,SAAS,CAAEX,SAAU,EAAKJ,MAAMI,WACrC,EAAKW,SAAS,CAAEX,SAAUM,K,EAG9BE,gBAAkB,WAChB,EAAKG,SAAS,CACZZ,MAAO,EACPD,cAAe,GACfG,MAAO,8B,EAIXS,oBAAsB,WACpB,IAAME,EAAW,EAAKhB,MAAMC,OAAOgB,MAAK,kBAAMC,KAAKC,SAAW,MAC9D,EAAKJ,SAAS,CAAEd,OAAQe,K,wEAGhB,IAAD,OACP,OACE,oCACE,4CACA,0IAIA,yBAAKI,UAAU,SACZC,KAAKrB,MAAMK,MAAQgB,KAAKrB,MAAMK,MAAQ,8CAEzC,uCACUgB,KAAKrB,MAAMG,MADrB,iBAC0CkB,KAAKrB,MAAMI,UAEpDiB,KAAKrB,MAAMC,OAAOqB,KAAI,gBAAGhC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,MAAZ,OACrB,kBAAC,EAAD,CACEH,IAAKC,EACLA,GAAIA,EACJC,IAAKA,EACLC,MAAOA,EACPC,YAAa,EAAKa,iC,GA9DXiB,aCaJC,MAff,WACE,OACE,yBAAKJ,UAAU,2BACb,uBAAGA,UAAU,eAAeK,KAAK,KAAjC,kBAGA,yBAAKL,UAAU,SAAS9B,GAAG,sBACzB,yBAAK8B,UAAU,cACb,uBAAGA,UAAU,oBAAoBK,KAAK,U,MCEjCC,MAVf,WACE,OACE,4BAAQN,UAAU,UAChB,yBAAKA,UAAU,aACb,0BAAMA,UAAU,cAAhB,mBCYOO,MAZf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,4BAAQP,UAAU,cAChB,kBAAC,EAAD,CAAMA,UAAU,SAElB,kBAAC,EAAD,QCDcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c5d06060.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TechElement({ key, id, src, title, handleClick }) {\n  return (\n    <>\n      <button>\n        <img\n          key={key}\n          id={id}\n          src={src}\n          alt={title}\n          style={{ width: \"100px\", height: \"100px\" }}\n          onClick={handleClick}\n        />\n      </button>\n    </>\n  );\n}\n\nexport default TechElement;","import React, { Component } from 'react';\nimport TechElement from './TechElement';\nimport images from '../images.json'\n\nclass Tech extends Component {\n  state = {\n    images,\n    imagesClicked: [],\n    click: 0,\n    topScore: 0,\n    guess: \"\"\n  };\n\n  handleTechElementClick = event => {\n    const elementId = event.target.id;\n    const plusClick = this.state.click + 1;\n    !this.state.imagesClicked.includes(elementId)\n      ? this.educatedGuess(plusClick, elementId)\n      : this.uneducatedGuess();\n      this.shuffleTechElements();\n    };\n    \n  educatedGuess = (plusClick, elementId) => {\n    this.setState({\n      click: plusClick,\n      imagesClicked: [...this.state.imagesClicked, elementId],\n      guess: \"You guessed correctly!\"\n    });\n    (this.state.topScore >= plusClick)\n    ? this.setState({ topScore: this.state.topScore })\n    : this.setState({ topScore: plusClick})\n  };\n\n  uneducatedGuess = () => {\n    this.setState({\n      click: 0,\n      imagesClicked: [],\n      guess: \"You guessed incorrectly!\"\n    });\n  };\n\n  shuffleTechElements = () => {\n    const newArray = this.state.images.sort(() => Math.random() - 0.5);\n    this.setState({ images: newArray });\n  };\n\n  render() {\n    return (\n      <>\n        <h2>Clicky game!</h2>\n        <p>\n          Click on an image to earn points, but don't click on any more than\n          once or you'll have to start over again!\n        </p>\n        <div className=\"guess\">\n          {this.state.guess ? this.state.guess : <b>Are you ready?</b>}\n        </div>\n        <div>\n          Score: {this.state.click} | Top Score: {this.state.topScore}\n        </div>\n        {this.state.images.map(({ id, src, title }) => (\n          <TechElement\n            key={id}\n            id={id}\n            src={src}\n            title={title}\n            handleClick={this.handleTechElementClick}\n          />\n        ))}\n      </>\n    );\n  }\n}\n\nexport default Tech;\n\n","import React from \"react\";\n\nfunction Nav() {\n  return (\n    <nav className=\"navbar navbar-expand-lg\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Click Reaction\n      </a>\n      <div className=\"navbar\" id=\"navbarNavAltMarkup\">\n        <div className=\"navbar-nav\">\n          <a className=\"nav-item nav-link\" href=\"/\"></a>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Nav;","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"container\">\n        <span className=\"text-muted\">⚛️</span>\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport Tech from './components/Tech';\nimport Nav from './components/Nav';\nimport './App.css';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <>\n      <Nav />\n      <header className=\"App-header\">\n        <Tech className=\"App\"/>\n      </header>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}